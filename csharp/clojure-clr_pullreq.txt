 Remove link to Google+ group, since it is no longer available
 
 Update project desc. for Gitter, Slack
 It's time to update the project description. People should be able to jump into Gitter room, once they would find out about the project.
 Fix build on Mono
 A PostBuildEvent ran on Mono when it shouldn't, probably some merge mistake.
Also updated the list of libraries that are passed to the compiler.

With this fix I can build with Mono 6.0 on macOS using `msbuild /restore build.proj /p:Runtime=Mono`
 Stop throwing exceptions on locals with primitive type hints
 There is no real reason for this exception and it makes high performance well typed code impossible to write.

I think this was fixed in the past but maybe regressed somehow?
 Expose environment vars that control spec to Mono platforms
 *nix platforms generally cannot set environment variables of the form `clojure.spec.check-asserts` with hyphens and dots. This patch gives two environment variables that control spec *nix friendly names when compiling on Mono.
 fixing bug with print repl failing for exception stackframes without …
 …class or method.

Specifically, in Arcadia it is sometimes the case that exceptions are thrown, some stackframes of which have null values for `.GetType` and `.GetMethod` (evaluating `(map (fn [a b] b) [1 2 3])` seems to cause this, for example). This breaks the exception handling machinery itself, which crashes the REPL.
 Compile spec namespaces early on Mono
 This enables building from a fresh clone. Might need to do the same on Windows. Also, this backs out of a regression in Clojure.Compile.csproj that reintroduced a Windows specific build step without checking the platform variable.
 fixing bug with print-trace-element for missing methods, classes
 `clojure.stacktrace/print-trace-element` does not handle case of StackFrames that lack a method or a class, which can come up on Unity's version of Mono on OSX at least. This fixes that, also uses `printf`.
 Fixing bug with stacktrace for missing methods
 The process of computing printouts for stacktraces in the REPL itself throws for certain Exceptions, in particular those with StackFrames with missing methods. This then kills the REPL.
```
(.adfadf :bla)
```
will kill the REPL, for example, if things are set up to print the complete stacktrace.
This can be fixed by checking if the method and class is actually there or not before computing the printout.
 Remove .Net 3.x as a requirement in referenced assemblies
 These shouldn't be needed, and they were preventing the build from running inside a .Net 4.6 environment.
 Update NuGet.targets to work with Mono
 Fixes build scripts to work with modern mono deployment on *nix.
 Replace slashes in InitClassName with dollar signs
 There seems to be a bug in Mono where types with slashes in their name are not findable by normal means. This patch changes the names generated by `InitClassName` to use `$` instead of `/`.
 Support direct-linking compiler option on *nix
 Fixes problem with hyphens in Unix environment variables
 - fixed system culture dependency in PrintfTests and RatioTests by setting InvariantCulture (failed on computer with Czech default culture)
 - added some sugar to DlrConsole just to see that DLR API is not implemented yet :)

 Improve (type-args) description
 
 Update and rename readme.txt to README.md
 Better markdown to me rendered by github.

 Fix build on Linux and OSX
 There were 2 problems:
1. (Affected OSX and Linux) Wrong path to "packages.config". Xbuild tried to search it in SolutionDir, not in ProjectDir. 
2. (Affected Linux) Linux has case-sensitive file system, so xbuild couldn't start "nuget.exe"

Command for build with mono:
EnableNuGetPackageRestore=true MONO_IOMAP=all xbuild build.proj /target:Build /p:Configuration="Release 4.0" /p:Platform="Any CPU"

 Stop type lookups on lexically bound symbols
 This is a port of @ztellman's pending patch http://dev.clojure.org/jira/browse/CLJ-1529

This patch avoids unnecessary lookups on symbols that are known to be lexically bound, resulting in significant speedup in many cases. Details are on the Jira page.

In the event of @ztellman's branch getting merged in to Clojure-JVM, merging this PR should reproduce its behavior.

 Use dlls over cljs when their timestamps are equal
 This case comes up when a project is e.g. cloned off a git repo and the DLLs and CLJ files get identical timestamps.

 Add fast path for RT.classForName
 Namespace qualified types skip the slow string comparison code path.
This commit also documents when each lookup path can be expected to
succeed.

 Added a couple of tests
 Added tests for compare-and-set! and (by-ref)

 Modify .nuget/NuGet.targets to fix problem with nuget downloads under mo...
 ...no and osx

Exec cmd (under xbuild@osx):
EnableNuGetPackageRestore=ture Runtime=MONO xbuild ClojureCLR.sln

Error message:
clojure-clr/Clojure/ClojureCLR.sln (default targets) ->
(Build target) ->
clojure-clr/Clojure/Clojure/Clojure.csproj (default targets) ->
clojure-clr/Clojure/.nuget/nuget.targets (RestorePackages target) ->

```
clojure-clr/Clojure/.nuget/nuget.targets: error : Command 'mono --runtime=v4.0.30319 clojure-clr/Clojure/.nuget/NuGet.exe install "packages.config" -source ""  -RequireConsent -o "clojure-clr/Clojure/packages"' exited with code: 1.
```

Reason:
different of position PakcageConfig.

 don't prepend *compiler-path* to assembly name
 The following console output illustrates the bug fixed in this commit:

```
    c:\github\VideoDump>(set CLOJURE_COMPILE_PATH=bin) & Clojure.Compile.exe program
    Compiling program to bin -- 366 milliseconds.

    c:\github\VideoDump>dir bin
     Volume in drive C has no label.
     Volume Serial Number is C201-2D30

     Directory of c:\github\VideoDump\bin

    06/20/2013  12:16 PM    <DIR>          .
    06/20/2013  12:16 PM    <DIR>          ..
    06/20/2013  11:58 AM             4,608 bin_SLASH_program.exe
    06/20/2013  11:58 PM             6,144 program.clj.dll
                   3 File(s)         15,360 bytes
                   2 Dir(s)  114,253,045,760 bytes free
```

`GenClass.GenerateClass` should not prepend the `*compiler-path*` to the
assembly name that is given to `GenContext.CreateWithExternalAssembly`;
the latter method already accounts for the `*compiler-path*` when
determining where to place the generated assembly.

 Fixed Tests in Clojure.Test
 Fixed bugs in io.clj and pprint.clj for the Clojure.Test project. Also
added function Clojure.String/split to test_cl_format.clj to support
pprint.clj test fix. All Test will now pass.

 Updated Dist task
 Updated Dist task because repetitive DLR include  was causing the build
to failing under mono 3.0.3

 Update build.proj & protocols.clj
 Updated SourceFiles parameter to allow ClojureCLR test to run

Updated arr with ^objects type information so the aget function will be properly resolved

 Embed AOT compiled Clojure assemblies in resource file
 I've reverted my previous changes & started from scratch. There's now a utility called ResPack that gets run as a post-build step (after Clojure.Compile) and embeds all the AOT compiled assemblies into one binary resource file called Clojure.resources. The RT has been modified to try to load assemblies from Clojure.resources as a last resort.

This is meant to make it easier for people who want to call Clojure code from C# or another .NET language, since they can now just copy Clojure.resources to their bin directory and no longer require references to the AOT compiled Clojure assemblies.

 Respect parameters to RT.load
 Respect tryLoadAsEmbeddedResource parameter & revert to original behaviour (FileNotFoundException) if false.

 Embed .clj.dll assemblies in Clojure.dll
 I've embedded all of ClojureCLR's .clj.dll assemblies in Clojure.dll to reduce the number of assemblies that need to be referenced when calling Clojure code from C#. I've probably included some assemblies that aren't necessary. Only minor changes to the runtime needed to be made to get it to work.

