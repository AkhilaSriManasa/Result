 Seatbelt.exe not executed through Invoke-ReflectedPSInject (What am I missing to the puzzle?)
 **Prologue:**
- Compiled seatbelt in a win10 +VS community (no AV, AMSI, etc.)
- The standalone EXE works fine
- Invoke-ReflectedPEInject works fine with a simple calc.exe
- With Seatbelt.exe I get the following errors with both versions of powershell.exe (32/64bit)

![image](https://user-images.githubusercontent.com/25242404/74934048-ff12d400-53ed-11ea-8a4d-068e8666c311.png)
![image](https://user-images.githubusercontent.com/25242404/74934056-02a65b00-53ee-11ea-891e-cb970a0d9309.png)
Modify class Program to be Public and also change Main to be Public.
https://github.com/GhostPack/Seatbelt/blob/master/Seatbelt/Program.cs#L155
Change from "class Program" to "public class Program". 

https://github.com/GhostPack/Seatbelt/blob/master/Seatbelt/Program.cs#L6817
Change from "static void Main(string[] args)" to "public static void Main(string[] args)"

 Added DeviceGuard and PowerShell Logging event IDs
 I have added three new functions. The first is `CheckDeviceGuard()` which checks the current status of CredentialGuard and its related services. I added this function into the `system` enumeration.

I also added two functions to `ListPowerShellSettings`: `List4103Events()` and `List4104Events()`

These functions look for any recent instances of 4103 or 4104 events and then returns a count of how many were found. Even if logging is not enabled, there may still be events that could be of interest, like commands executed remotely.

If `full` is provided as an option these functions will return some information about the events, such as the name/path of the script and the account used to execute the commands. The functions also collect the full contents of the commands/script blocks, but I commented out the output. It can be _a lot of text_ and may be better to grab the contents after triage.

In place of full scrip block output, I experimented with searching the commands for instances of keywords like `PSCredential` and `password` to highlight events that may contain logged plaintext passwords.
 Unhandled exception for extremely long file names
 When running seatbelt.exe all on a machine it consistently errored out when encountering file names that were at the maximum permissible length in windows.

The following error was thrown

> Unhandled Exception: System.IO.PathTooLongException: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
>    at System.IO.Path.SafeSetStackPointerValue(Char* buffer, Int32 index, Char value)
>    at System.IO.Path.NormalizePathFast(String path, Boolean fullCheck)
>    at System.IO.File.GetLastAccessTimeUtc(String path)
>    at Seatbelt.Program.ListInterestingFiles()
>    at Seatbelt.Program.Main(String[] args)

If the program can skip (and maybe count how many files are skipped) without crashing that would be desirable behavior.  Alternately, handling the unusually long values and parsing them the same would be ideal.

Using the latest version of Seatbelt and compiled locally. 

Related: https://github.com/GhostPack/Seatbelt/commit/def4ef3d75d6f28b3b80d3a37b97425f70f3a715
https://github.com/GhostPack/Seatbelt/issues/9

Thanks, 
can be solved by:
1. adding
if (file.ToString().Length > 248)
{
     Console.WriteLine ("Error: File path or filename {0} too long.", file);
}
else
{
     ... 
|

2. Catching exception....

3. Find a way how to bend over the library function accepting long path and file names. Microsoft stupid stuff,

Personally fo rme - I added if else to be able to use the app for the most fucntions (last files not important for my purpose....).


 FEATURE REQ: Add checks for Oracle SQLDeveloper connections.xml
 Hi there,

Would it be possible to incorporate support for the connections.xml file that Oracle SQLDeveloper will drop, containing hostnames and credentials?  Often useful for onward lateral movement.

I believe it is stored in:
`\Users[User]\AppData\Roaming\SQL Developer\System\`

but also often under a subfolder such as:

(Win 7)
`C:\Users\<username>\AppData\Roaming\SQL Developer\systemX.X.X.X.X\o.jdeveloper.db.connection.X.X.X.X.X.X.X\connections.xml`
or
`“C:\users\USER\AppData\Roaming\SQL Developer\system3.1.07.42\o.jdeveloper.db.connection.11.1.1.4.37.59.48”.`

They can also be decrypted using something similar to this:
`https://pypi.org/project/sqldeveloperpassworddecryptor/`

If I figure out how to do it within the code, I'll do a PR, but thought I'd submit this issue so that others can see it also.
 Added Carbon Black, Cylance, and CrowdStrike Processes
 Added Carbon Black Defense and Cylance Protect executable processes to "ListInterestingProcesses" hashtable.
 Add Xen to IsVirtualMachine
 Simply added a new condition to IsVirtualMachine, so that VMs running on Citrix XenServer are correctly reported as being virtual.
 Added CrowdStrike EDR
 Added CSFalconContainer.exe process.
 Split Program.cs to separate focused files
 ### Why these changes?:

Similarly to the refactoring in **Rubeus** and **Watson** (https://github.com/rasta-mouse/Watson), the 6927 line `program.cs` class is a bit of a monster here too. 
This is a nightmare to try to read and understand, and will be a problem to maintain and add to going forward.


### What's changed - in brief:
+ Each 'check' has been moved to a `probe` class in `\Probes\`
+ Added an option `ToFile` - that allows outputting the results to a file
+ Performance improvements around the filesystem scanning:  
**Before:** Completed All Safety Checks in **41** seconds  
**Now:** Completed All Safety Checks in **18** seconds
+ Merged:  
PR 14 (https://github.com/GhostPack/Seatbelt/pull/14) (and fixed a null reference exception)  
PR 15 (https://github.com/GhostPack/Seatbelt/pull/15)
+ Better handling of exceptions allowing checks to continue rather than fail early
+ Re-written command line arguments parser  
+ The command line isn't case sensitive any more


### What hasn't changed:
+ Any of the P/Invoke voodoo  
+ The version number.
+ still .Net 3.5 (this is a pain in the arse for VS 2017 tbh)

### Comments

While working on the code I noticed that `all` wasn't running *all* the available checks - as the help text implied - **this version will run all the available checks if `all` is selected** <- is this correct? If not the `ProbePresets\AllPreset.cs` can simply be changed and the original lines uncommitted.

The probes are in the `Probes` folder and the *Presets* ( *full* \ *all* \ *user* \ *system* ) are in the `ProbePresets` Folder

The new version produces a lot more output - due to better coping with exceptions.

### Testing
I've tested the changes on 2 machines by piping the output from the original version and new versions, and Diffing the output. As far as I can see the functionality between the 2 versions is unchanged except for newline differences and the extra output as noted above.


### How to add new probes?

Every probe/check class needs to implement `IProbe` and have a `ProbeName` property to identify the check.

```
    public class ANewProbe : IProbe
    {
        public static string ProbeName => "NewProbe";
        
        public string List()
        {

            // All code for the check goes here
            // return the results as a string

        }
    }
```

The program will automatically add the probe to the available probes and call it if required. (Just need to add the name & info to the `Info.cs` class)


@HarmJ0y 	Bump?

 Add ListAppLockerSettings()
 Created a new `ListAppLockerSettings()` function and added it to the `system` check.
Example output:

```
> Seatbelt.exe system

[...snip...]

=== AppLocker Settings ===

  [*] AppIDSvc is Running

    [*] Appx not configured
    [*] Dll not configured

    [*] Exe is in Audit Mode
      [*] <FilePathRule Id="921cc481-6e17-4653-8f75-050b80acca20" Name="(Default Rule) All files located in the Program Files folder" Description="Allows members of the Everyone group to run applications that are located in the Program Files folder." UserOrGroupSid="S-1-1-0" Action="Allow"><Conditions><FilePathCondition Path="%PROGRAMFILES%\*"/></Conditions></FilePathRule>

      [*] <FilePathRule Id="a61c8b2c-a319-4cd0-9690-d2177cad7b51" Name="(Default Rule) All files located in the Windows folder" Description="Allows members of the Everyone group to run applications that are located in the Windows folder." UserOrGroupSid="S-1-1-0" Action="Allow"><Conditions><FilePathCondition Path="%WINDIR%\*"/></Conditions></FilePathRule>

      [*] <FilePathRule Id="fd686d83-a829-4351-8ff4-27c7de5755d2" Name="(Default Rule) All files" Description="Allows members of the local Administrators group to run all applications." UserOrGroupSid="S-1-5-32-544" Action="Allow"><Conditions><FilePathCondition Path="*"/></Conditions></FilePathRule>

    [*] Msi not configured

    [*] Script is in Enforce Mode
      [*] No rules
```
We're tracking this on our end and it'll be incorporated into the next release.  Thanks for the contribution!

 Fix issues with parsing of Service binary paths
 Seatbelt parses and enumerates services via WMI, and attempts to pull information out of the binaries that the service points to. There were a few issues with the approach that was taken:

* It didn't cover cases where service paths were quoted or had spaces (such as Motorola's Bluetooh OBEX Service).
* It didn't handle cases where service binaries didn't have an extension (such as Carbon Black's Sensor agent).
* It didn't seem to correctly handle arguments passed to the service.
* When errors were encountered while parsing the file information, there was no try/catch around a single case, and hence the entire service parsing loop was exited (resulting in the rest of the services not being enumerated).

This PR attempts to fix this problem. It should handle quoted service paths, files without extensions, and cases where arguments are passed to the service exe.

There are some thorough comments on the approach in the code, but basically it does the following:

1. Assumes that if a quote exists it's in the binary path, and makes use of that assumption, by taking what's after the first quote (based on a simple split). This _might_ fail if the service binary isn't quoted, but an argument is quoted.
1. Assumes from there that anything before the first space is the target binary.
1. Catches the exception in the file version info call so that we don't bail on the whole loop.

This approach makes it work in the cases I saw breakages on a recent machine I ran it on.

Thoughts and feedback welcome. Thanks!
BUMP!

Tracking and has been added into the rearchitected version. Should have the new release out within a week :)

Rearchitected version?

 Does not build on VS2013
 Probably an issue with the reference ?
 
Error	1	Type byte, sbyte, short, ushort, int, uint, long, or ulong expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	62	42	Seatbelt
Error	2	Type byte, sbyte, short, ushort, int, uint, long, or ulong expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	81	47	Seatbelt
Error	3	Type byte, sbyte, short, ushort, int, uint, long, or ulong expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	805	50	Seatbelt
Error	4	Type byte, sbyte, short, ushort, int, uint, long, or ulong expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	841	44	Seatbelt
Error	5	Type byte, sbyte, short, ushort, int, uint, long, or ulong expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	871	43	Seatbelt
Error	6	Type byte, sbyte, short, ushort, int, uint, long, or ulong expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	886	41	Seatbelt
Error	7	{ expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	4319	44	Seatbelt
Error	8	; expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	4319	100	Seatbelt
Error	9	} expected	E:\pentest\Seatbelt\Seatbelt\Program.cs	4322	14	Seatbelt
Error	10	The name 'when' does not exist in the current context	E:\pentest\Seatbelt\Seatbelt\Program.cs	4319	44	Seatbelt


Visual Studio Community 2017 is the supported build environment.  If you determine why VS2013 doesn't build, feel free to submit a PR.  

  Improve FindFiles() performance by removing unecessary operations
 Previously, when several patterns where passed, the function would recurse in sub directories for each pattern.
With this version and for each folder, all patterns are searched in the folder's files, but then, the function digs in each subdirectory only once.
In my tests, the `ListInterestingFiles` operation used to take 170s, for 595 interesting files found, and with this it takes 55s, and discovers the same files (no regression).
 ListLocalGroupMembers() code factorization, and add handling of unresolved SIDs
 Factorized code is easier to maintain :)
And handle the case when "S-1-5-32-580" for "Remote Management Users" (or any other) is missing, e.g. on older versions of Windows
you are correct : ) thanks again!

 Get command line from listening processes
 
 Unhandled Exception for   
Unhandled Exception: System.IO.PathTooLongException: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
   at System.IO.Path.SafeSetStackPointerValue(Char* buffer, Int32 index, Char value)
   at System.IO.Path.NormalizePathFast(String path, Boolean fullCheck)
   at System.IO.Path.GetDirectoryName(String path)
   at System.IO.Directory.InternalGetFileDirectoryNames(String path, String userPathOriginal, String searchPattern, Boolean includeFiles, Boolean includeDirs, SearchOption searchOption)
   at System.IO.Directory.GetFiles(String path, String searchPattern, SearchOption searchOption)
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1362
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.FindFiles(String path, String patterns) in C:\git\Seatbelt\Seatbelt\Program.cs:line 1364
   at Seatbelt.Program.ListInterestingFiles() in C:\git\Seatbelt\Seatbelt\Program.cs:line 5446
   at Seatbelt.Program.Main(String[] args) in C:\git\Seatbelt\Seatbelt\Program.cs:line 5735
PathTooLongException handling should be improved by https://github.com/GhostPack/Seatbelt/commit/def4ef3d75d6f28b3b80d3a37b97425f70f3a715
Can you retry with latest code please?

Should be resolved with https://github.com/GhostPack/Seatbelt/commit/5b3e69c16cc1668622a0e666162b35cb9f7243ca , reopen if it's still failing.

 Windows Vault Add-On
 Added a new function `DumpVault` that will search the Window's Vault for saved credentials and print them to the console. Useful for retrieving things such as saved Internet Explorer and Edge credentials. If something doesn't look right let me know and I can make the requisite changes; cheers! 
Thanks for the PR!

 The arguments "all" and "full" cannot be combined
 The README states that:
> SeatBelt.exe all will run ALL enumeration checks, can be combined with full.

Should be resolved with https://github.com/GhostPack/Seatbelt/commit/5b3e69c16cc1668622a0e666162b35cb9f7243ca , reopen if it's still failing.

Fix confirmed!

 Create .gitignore with common VS exclusions
 
 Add handling of PathTooLongException in FindFiles()
 Happens when the generated path (path+pattern) is too long
Thanks again!

 Small typo "Triagechrome" -> "TriageChrome"
 To be consistent with the rest
 Improve error message in ListDNSCache() when using Windows before 8/2012
 The 'MSFT_DNSClientCache' WMI class is unavailable on older Windows versions
Cf. https://msdn.microsoft.com/en-us/library/hh872334%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396

I also moved the "=== DNS Cache (via WMI) ===" line, because if an exception occurs, we get the exception printed but without the header and we do not know in which section the problem is.
 Add empty line in output between each mapped drive
 Same as in ListNetworkShares() just after
 Localized names for well-known groups (e.g. "Administrators") aren't implemented
 Windows has localized names for well-known groups in some locales (for example French or German).
The "Local Group Memberships" section does not implement those and therefore fails on such localized Windows versions.
Should be resolved with https://github.com/GhostPack/Seatbelt/commit/5b3e69c16cc1668622a0e666162b35cb9f7243ca , reopen if it's still failing.

Fix confirmed (caught the shout-out :wink:)!
Suggested improvement in #11 

