 Concise way to write the python io
 Tks for your effort! Wonderful code!
Just a little improvement for python io.
```python
class SamInput(object):
    def __init__(self):
        self.inp = []
        for i in sys.stdin:
            i = i.replace("\n", "")
            j = list(i.split())
            self.inp.append(j)
```
canbe writed as:
```python
def __init__(self):
        self.inp=[line.split() for line in list(sys.stdin)] 
```
😅 
 Mistake at cpbook-code/ch3/dp/LIS.cpp 
 Tks your wonderful effort, great book!
But sorry some problem about the function `int LIS(int i)`
LIS is a special DP problem, need to check every element of the array. So a better approach is bottom-up that use tabulation. 
But **cpbook-code/ch3/dp/LIS.cpp** build the DP using DAG to find the single-source longest path. This method only works for the case that the last element of the array is the max, and initial `ans=1`. But not for the case like {5 4 2 3 1}. 
Because LIS is special that need to **ensure every element would be recursively 
checked!**
Additional caution, if initial using `ans=0` then, only the first element of the array is the min, the base case `i==0` would be recursively visited for every check that should be recursively visited. So using `ans=0` need to ensure the first element is the min of the arrary.
Hi git-hub-tig,

-. top-down or bottom-up is just preference, I prefer top-down, so will remain top-down in CP4 :).
-. I now notice the bug with {5,4,3,2,1} on the very old O(n^2) that was never tested again after I use O(n log k) version all these time, thanks for catching this. I have now changed ans = 0; to ans = 1; before the recursive case to fix this case without resorting to ensure that i==0 is the minimum, i.e., LIS can now start from any index and just end at n-1 that is set to have "INF" (very large number).
-. I have tested {5,4,3,2,1,99 (need last number = "INF")} -> returns 2 of course, and now test this code with many random tc.
-. I push a newer file, pls stress test it again

 Use better math functions
 Use `lround`, `log2` in c++11, `Math.round` in java and `round`, `math.log2` in python3. Note that `round` in python3 returns `int`(instead of `float`as in python2).
Note too that the rounding functions behave differently when there is a tie.

C++11 `lround`:
Resolve ties by rounding away from zero.

Java `Math.round`:
Resolve ties by rounding to positive infinity.

Python3 `round`:
Resolve ties by rounding toward the even choice.

 Use std::swap
 
 Replace random_shuffle with shuffle
 `random_shuffle` is deprecated in c++14 and removed in c++17 (https://en.cppreference.com/w/cpp/algorithm/random_shuffle). `shuffle` is added in c++11 to provide the same functionality.

If random seed is desired, replace `default_random_engine()` with `default_random_engine(random_device()())`.
 Update UVa10181.cpp
 There are a few codes that I didn't translate to OCaml last year because I want to fix the C++ version first. This is one of them.
 Introduce `@lru_cache` to UVa10130.py
 ![Screenshot 2020-02-10 at 1 32 27 AM](https://user-images.githubusercontent.com/10240857/74106855-3a6b0280-4ba5-11ea-9025-fd5b51e29d90.png)

It's faster than the previous implementation, cleaner code overall.
thanks for your contribution :)

 Fix UVa10130.py
 increase recursion limit
no more runtime error
😁
wow just like that
+1 surprise us

 Fenwick Tree Correction
 In cpbook-code/ch2/ourown/fenwicktree_ds.py line 16, I changed the second j to an i.
 Fenwick Tree Correction
 In cpbook-code/ch2/ourown/fenwicktree_ds.py line 16, the second j should be an i, not a j.
Why not make a pull request?

Oh, thanks. I am fairly new to GitHub, and didn't know that anyone could create pull requests on someone's project. I made one now though.

 algorithm1
 continue step by step
step by step to continue 

 Add License
 Great tool and website!
Under which license is your code released? Apache 2.0?
Hi Leandro,

Good idea to mention "license" in the repo.

I think I will use something like this
https://creativecommons.org/licenses/by/4.0/

all code there are (reasonably good, I hope) implementation of popular CS
textbook algorithms, so feel free to use them

Regards,

Steven Halim (Dr.)
Senior Lecturer
School of Computing, National University of Singapore
<http://www.comp.nus.edu.sg/~stevenha>
https://visualgo.net and https://cpbook.net


On Thu, May 23, 2019 at 5:15 AM Leandro Doctors <notifications@github.com>
wrote:

> Great tool and website!
> Under which license is your code released? Apache 2.0?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/stevenhalim/cpbook-code/issues/47?email_source=notifications&email_token=ABIDWOBPPT2QHBLENKOH3PTPWWZVJA5CNFSM4HOYBJJKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4GVJ62NQ>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABIDWOGADICLL6YPJH7TB7DPWWZVJANCNFSM4HOYBJJA>
> .
>


Hi,

You're welcome!

Just to mention that CC advises against using their licenses for software https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software. They are good for other things, such as works of arts.

If I understood well, your idea is allowing people to use your software for any purpose, as long as they mention you? If this is the case, I would advise you to use a non-copyleft, liberal license specially suited for software, such as Apache 2.0 https://www.gnu.org/licenses/license-list.html#apache2 

Please note that I am not a lawyer, and that this is not legal advise :-)

Best,
Leandro

As for other, similar options, you could also use something like [BSD-3-clause (also called "modified BSD")](https://www.gnu.org/licenses/license-list.html#ModifiedBSD) or [UPL](https://www.gnu.org/licenses/license-list.html#UPL).

BTW: I edited my first message.

I meant: second comment :-)

ping @stevenhalim ?

Hi Leandro

I was away for family holiday in the past 4 days :O.

Ok thanks for telling me that CC license is not for software :O.
I think I will just pick UPL, very permissive license.

Regards,

Steven Halim (Dr.)
Senior Lecturer
School of Computing, National University of Singapore
<http://www.comp.nus.edu.sg/~stevenha>
https://visualgo.net and https://cpbook.net


On Wed, May 29, 2019 at 5:21 AM Leandro Doctors <notifications@github.com>
wrote:

> ping @stevenhalim <https://github.com/stevenhalim> ?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/stevenhalim/cpbook-code/issues/47?email_source=notifications&email_token=ABIDWOESCFXYJVFFADXCBRLPXWO5NA5CNFSM4HOYBJJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWNPLAI#issuecomment-496694657>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABIDWOHB7KO3JFPGPGPU7ZDPXWO5NANCNFSM4HOYBJJA>
> .
>


 Add python suffix array
 This PR contains a Python 3 implementation of suffix array and some utility functions. The suffix array construction was translated from https://cp-algorithms.com/string/suffix-array.html.

I have tested the code by using it to AC [dvaput](https://open.kattis.com/problems/dvaput) and [stringmultimatching](https://open.kattis.com/problems/stringmultimatching). As Python 3 is too slow, I had to submit as Python 2 (with minor changes).
> The suffix array construction was translated from https://cp-algorithms.com/string/suffix-array.html.
:O... let me check the difference between that and my CP3.18b version
I actually prefer to have similar base code translated to different languages, will put this PR on hold

I decide to merge first so that to have python version of SA, at least it is "AC". I will put a comment that the SA code is written differently from cpp/java version

 Fix pointsToLine
 In my computer, the original code seems to not work -- fixed it by abstracting `a` first.
hm... I didn't find anything wrong with the original :O..., is it because of EPS setting?
I reject this PR for now

Ehhh sorry, another student also gave the same bug report

         1.0,              // IMPORTANT: we fix the value of b to 1.0
         -(double)(l.a*p1.x) - p1.y}; } // This l.a refers to the old value of l

I take the modification now

 Add Python code for ch6
 Add Python code for ch6 (by Zhi Jian)
AC

 Add Python solution for UVa11060.py and fix UVa11060.cpp
 Add UVa11060.py and fix incorrect C++ solution for the same problem (by Zhi Jian)
AC

 Add Python code for MCBM and Max Flow
 Add Python code for MCBM and Max Flow in ch4 (by Zhi Jian).
Marked as draft PR for now, the Max Flow code requires more testing.
Ok let me know if this is done, leaving the PR as it is

 Add maxflow vertex capacities
 Sample graph used for demonstration:

![image](https://user-images.githubusercontent.com/35740636/54087469-003e2300-438e-11e9-8181-63db426964db.png)

Suggestion noted, I will need to modify the writeup of CP4 first before I take this proposal. Good idea to abstract out baseline maxflow with maxflow with vertex capacities

 Add more Python code for ch4
 Add more Python code for ch4 (Zhi Jian)
thanks @zj-cs2103 . There are so many code that I have to review one by one. 

 Add more Python code for ch4
 Add more Python code for ch4 (by Zhi Jian)
 Add Python code for ch4
 Added Python code for UVa10004, UVa10986, Dijkstra and Floyd Warshall (by Zhi Jian).
good @zj-cs2103 . I will teach Bellman Ford's/Dijkstra's in CS2040C soon. Good to share that the Python version is ready.

 Add Python solutions for ch5
 Add Python solutions for UVa00350, UVa01230, UVa10814 (by Zhi Jian)
AC

 Fix include bits/stdc++.h header for UVa11065
 
 Add UVa11450_bu.py
 Added UVa11450_bu.py (by Zhi Jian).
 Add ch3/UVa00725.py and ch3/UVa11450.py
 Added Python solutions for UVa 00725 and UVa 11450 from ch3 (by Zhi Jian).
725 has been contributed by other student, 11450 haven't, maybe justPR the 11450

Please see the new pull request: https://github.com/stevenhalim/cpbook-code/pull/35

 Add 8 Queens Chess Problem Python solution
 
already contributed by earlier student

 Add python code for UVa10943
 Convert to python code for UVa10943

 Add python code that AC UVa11742 and UVa12455
 Convert two files to python
 Translate some code to python
 
 Add alternative solution for UVa11212 with single queue implementation
 
