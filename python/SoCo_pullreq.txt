 Lists 'sonos amp' as a soundbar in order to provide night mode and speech enhancement support for amp.
 Night mode and speech enhancement is supported by Sonos amp, but the amp is not listed in the code, meaning it is not supported at present.
 Fixes required to pass updated pylint checks
  Pylint has been updated and is picking up a couple of new issues, hence all test builds will fail. This PR fixes the issues.
 Fixes #717
 This address issue #717 using the code supplied by @Sonosy (modified for Black compliance). I also had to fix a pylint 'disable' directive to pass pylint tests.

Integration tests run successfully.
 Autogenerate vendor extended DIDL-Lite classes
 Ok. So this has been brewing. We see quite a lot of vendor extended DIDL-Lite classes on a Sonos network. Every time a music service supplier created a new one, this would cause an error in SoCo. This PR adds the ability to autogenerate unknown extended classes.

I also managed to find a way to name the new classes that is mostly compatible with the way we have done so far, which actually means that the vendor extended classes:

DidlRecentShow
DidlComposer
DidlAlbumList
DidlSameArtist
DidlPlaylistContainerFavorite
DidlRadioShow

in data_structures.py are now redundant. I have however chosen not to delete them, to make sure not to cause a regression if a user imports one of these classes directly.

The autogenerated classes are simple extensions of their base class which means the only item that gets changes is the ``item_class``. If the new class add attributes or has a non-standard content tag, then it will still be necessary to create the class by hand. But in all other cases, this should now work and that also means that we will not add anymore vendor extended classes to data_structures.py unless it is necessary for one of the two reasons mentioned above.

Comments and reviews welcome.
 fix spelling typo
 
 0.19 release notes
 Pull request for 0.19 release notes. The PR is made just to make sure all the tests pass on Travis before tagging the release.
 Paint soco black
 Yeah. There is finally a PR to paint SoCo black.

black is "the uncomprimising code formatter" (https://github.com/psf/black) and its sole purpose is to format **all** code into a consistent style. black **is** uncompromising, in that it allows very little customization, but personally I find that I much prefer to have a codestyle tool that can't be modified, to debating which style is best. From my perspective, codestyle consistency is a hell of a lot more important that the itty bitty details of the style.

But perhaps the biggest advantage of black is that it almost removes code style discussions from reviews. I set it up so that there is a travisCI check that checks that the branch is black formatted. As those of that have gone through a review with me will know, I do care about style, but implementing it this way will remove the need to comment on codestyle to the point where I can just refer to the tool.

I painted both soco, the examples and the tests black. As an added advantage to this, black formatting the test code brought it within an hours of work to make it pass linting as well, which means that we now have linted test code as well :man_cartwheeling: 

Since this is code formatting, it touches just about all lines of code, which means that all other PRs will break, but I will help with that.

Let me know what you think.
 Fixes #702
 This fixes #702 with the modification suggested in the defect report.
 Add stereo pairing and unpairing operations
 Closes #612

This PR adds the methods `create_stereo_pair()` and `separate_stereo_pair()` to the SoCo class. This is useful for certain automation scenarios. It also allows pairing of dissimilar Sonos speakers, which is not possible using the Sonos apps. For example, pairing a Sonos One with a Play:1.

Documentation and unit tests are included. 

The implementation is derived from https://github.com/erikmansson/pair-sonos, and I thank @erikmansson for the great work on this.
 Fix for missing audioitem.linein DIDL data structure
 I've recently started using the Line-in on my Sonos Connect, and Soco crashes with an unknown data structure type.  It claims to be a subset of AudioItem, so I simply copied over that object and tacked on the linein designator.

This is another case where SoCo should probably just roll-up to the parent object when encountering subclasses rather than maintaining a hardline on DIDL compliance since that is clearly not a priority for Sonos (see my previous comments around lack of ProtocolID and other stuff being addressed by quirks).  

But since there are fewer examples of the . subclassing than # subclassing and line-in is a common feature across several Sonos devices, it makes sense to target this one directly.
 Fix quirks implementation
 If protocol_info gets set manually we also have to make sure that
resource.text is defined otherwise we run into issues later on.
 Beginning of data structure quirks, fix for missing protocolInfo
 For a long time it has annoyed me, that I couldn't find a compromise I was happy with, between keeping the implementation of DIDL-Lite in data_structures.py specification compliant and at the same time allowing service specific fixes for non spec-compliant behavior. Now I have a proposal for one.

As is usually the case, I didn't make it up, but simply borrowed a solution for cleverer people. I think it was in the realm of graphics card drivers or 3D library implementations for games that I first heard of the idea of quirks, as a way of (separately) implementing exceptions for specific hardware or games that behaves differently from what they are supposed to and I thought that would be a good solutions for us.

In the long run, the idea is to pull the DIDL-Lite implementation in data_structures.py back towards spec compliance and then specifying fixes for all non spec-compliant behavior in data_structure_quirks by manipulating the XML before it is processed. This has the added advantage of allowing us to easily track all the exception we have implemented, instead of them being scattered in the main implementation.

At current the module consist only of the `apply_resource_quirks` function with a crude fix for missing protocolInfo, but there will in the future also be a `apply_object_quirks` function to take care of that.

Let me know what you think of the idea?
 Add Python 2.7 deprecation warning
 As per #591 there no longer seems to be any opposition against deprecation of Python 2.7 in SoCo. This PR adds a deprecation warning stating that SoCo 0.19 will be the last version to support Python 2.7.
 Fixing error in index.py so it will run.
 There is an error when trying to run this code: TypeError: Unicode-objects must be encoded before hashing. I added the code to fix that issue.
 Add unit test for SoCo.MusicLibrary.delete_music_share().
 This minor PR just adds a missing unit test.
 Add operations to get/set the speaker balance
 This is a PR for the functionality discussed in https://github.com/SoCo/SoCo/issues/692. Credit to https://github.com/tephlon for the idea and the majority of the implementation.
 Avoid trying to iterate a None
 Fix iteration bug i discover.py
 Avoid trying to iterate a None
 Just added another check to avoid iteration of a None where we expect a list
 Add group volume operations to SoCo
 This PR adds group `volume` and `mute` properties, and the group `set_relative_volume()` method, to the ZoneGroup class.
 Adds the SoCo.set_relative_volume() method.
 This PR adds the `set_relative_volume()` method to the `SoCo` class.
 WIP: Add method to create a SoCo object from a known Sonos device IP address
 This method allows instantiation of a SoCo object using a known Sonos device IP address. This is a convenience for cases where the normal discovery method is failing, for example when there is a network problem with multicast traffic.
 Use print() function in both Python 2 and Python 3
 fixes: #684 

This PR pulls the core changes from #683 as requested by @KennethNielsen.  After this PR has landed, we can determine what to do with #683.
 Travis CI: Drop the EOL Python 3.4, add 3.9-dev
 Also, flake8 the _whole_ repo including tests and setup.py

Reformat code with __psf/black__ on dev_tools, examples, tests to improve flake8 compatibility.
 Music library share operations
 This is a preliminary PR for functionality that partially addresses https://github.com/SoCo/SoCo/issues/678.

I'm not expecting merge approval at this stage. Instead, I'm seeking feedback on the implementation itself, and also on what else is required to reach done/done. Tests, documentation, etc.

Note that I've hand-cooked the XML extraction in the `MusicLibrary` class, for the `list_library_shares()` method, and it returns a list of shares as strings. I suspect this approach is non-standard. Happy to have pointers on how to standardise this.
 Update events_base.py
 Use config.EVENT_LISTENER_PORT in temp_sock.connect(). Fixes bug found in #589 
 Update CI environments after release of Python 3.8
 This is a simple PR to update the continuous integration environments after Python 3.8 was released. I also restricted the number of dev environments for stable Python versions to 2, to not over-use the ressource.
 Add audioItem.MusicTrack.RecentShow to data structures (closes #655).
 This adds the object.item.audioItem.MusicTrack.RecentShow class to data structures. This is another non-UPnP-spec-compliant class which seems to be used for certain podcasts (see #655). This PR adds the class as outlined in that issue.
 Add a Gitter chat badge to README.rst
 ### SoCo/SoCo now has a Chat Room on Gitter

@KennethNielsen has just created a chat room. You can visit it here: [https://gitter.im/SoCo/SoCo](https://gitter.im/SoCo/SoCo?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.rst:


[![Gitter](https://badges.gitter.im/SoCo/SoCo.svg)](https://gitter.im/SoCo/SoCo?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://gitlab.com/gitlab-org/gitter/readme-badger/issues).

Happy chatting.


PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.

 Remove pytest-cov upper bound
 Works just fine with 2.6.* and 2.7.* versions
 Fix for Issue 660 - Properly parse discover
 Properly parse discover return messages. Addresses 
https://github.com/SoCo/SoCo/issues/660
