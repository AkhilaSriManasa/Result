 请问什么时候支持Hprose 3.0?
 如题
等 Golang, Python, PHP, Rust, Swift 版本完成之后。Java 语言本身缺的东西太多，比如没有 async/await 的异步语法，JDK 本身的网络库太难用，这些问题导致我很不想碰 Java。不知道到 Java 20 版本的时候，这些问题能不能都解决了。

之前在.net core下用了3.0,现在在java下调不了,用起来也别扭

目前 http 应该是可以的调用的。

http的话我觉得直接用Feign还简单一点

嗯，看了一下 Feign 确实不错。

 关于内存溢出的疑问
 hprose-java的server，用的版本是2.0.38.服务在运行一段时间之后就会出现内存溢出的异常，服务器openfile过多，不知道是哪里配置的不对。

```
Exception in thread "Thread-11" java.lang.OutOfMemoryError: Direct buffer memory
	at java.nio.Bits.reserveMemory(Bits.java:695)
	at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)
	at hprose.io.ByteBufferStream$ByteBufferPool.allocate(ByteBufferStream.java:64)
	at hprose.io.ByteBufferStream$ByteBufferPool.access$200(ByteBufferStream.java:31)
	at hprose.io.ByteBufferStream.allocate(ByteBufferStream.java:107)
	at hprose.net.Connection.receive(Connection.java:138)
	at hprose.net.Reactor.dispatch(Reactor.java:100)
	at hprose.net.Reactor.run(Reactor.java:49)
Exception in thread "Thread-10" java.lang.OutOfMemoryError: Direct buffer memory
	at java.nio.Bits.reserveMemory(Bits.java:695)
	at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)
	at hprose.io.ByteBufferStream$ByteBufferPool.allocate(ByteBufferStream.java:64)
	at hprose.io.ByteBufferStream$ByteBufferPool.access$200(ByteBufferStream.java:31)
	at hprose.io.ByteBufferStream.allocate(ByteBufferStream.java:107)
	at hprose.net.Connection.receive(Connection.java:138)
	at hprose.net.Reactor.dispatch(Reactor.java:100)
	at hprose.net.Reactor.run(Reactor.java:49)
Exception in thread "Thread-12" java.lang.OutOfMemoryError: Direct buffer memory
	at java.nio.Bits.reserveMemory(Bits.java:695)
	at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)
	at hprose.io.ByteBufferStream$ByteBufferPool.allocate(ByteBufferStream.java:64)
	at hprose.io.ByteBufferStream$ByteBufferPool.access$200(ByteBufferStream.java:31)
	at hprose.io.ByteBufferStream.allocate(ByteBufferStream.java:107)
	at hprose.net.Connection.receive(Connection.java:138)
	at hprose.net.Reactor.dispatch(Reactor.java:100)
	at hprose.net.Reactor.run(Reactor.java:49)
Exception in thread "Thread-14" java.lang.OutOfMemoryError: Direct buffer memory
```
我觉得可能是有非法的客户端请求导致的。请求头部的前4个字节是包体的大小，如果非法的客户端发送一个无效的请求，头部前4个字节所表示的包体的大小非常大，那么在分配内存时就会导致内存溢出。在 hprose 3.0 中，tcp 请求头部增加了一个crc32的校验，并且可以设置请求最大长度的限制，可以有效的防止这种非法请求。不过 java 版本暂未实现 hprose 3.0。

目前 hprose-java 2.0 的 tcp 服务最好是部署在内网，防止有非法的客户端来访问到它。如果部署在公网的话，最好用 hprose 的 http 服务。

> 我觉得可能是有非法的客户端请求导致的。请求头部的前4个字节是包体的大小，如果非法的客户端发送一个无效的请求，头部前4个字节所表示的包体的大小非常大，那么在分配内存时就会导致内存溢出。在 hprose 3.0 中，tcp 请求头部增加了一个crc32的校验，并且可以设置请求最大长度的限制，可以有效的防止这种非法请求。不过 java 版本暂未实现 hprose 3.0。
> 
> 目前 hprose-java 2.0 的 tcp 服务最好是部署在内网，防止有非法的客户端来访问到它。如果部署在公网的话，最好用 hprose 的 http 服务。

感谢回复！
目前这边所有的RPC接口都有访问log，但是没有看到异常访问的log，所以也定位不了是否属于非法访问。
从异常的堆栈来分析也没有什么帮助。所以有没有什么办法可以帮我确定问题的。再次感谢~

这个异常是在接收数据时产生的，因此，还到不了 log 的位置。

> 这个异常是在接收数据时产生的，因此，还到不了 log 的位置。

ok，我接下来会做好访问限制，添加ip白名单，来排除这方面的原因，以后也会陆续跟踪此问题。

最后期待3.0版本早日上线~

@liuwenpeng1 请问你解决这个问题了吗？我这边也遇到这个问题了。非常规律，每隔三五天就出现一次，只能重启，看起来不是非法请求 @andot 

 idea中测试hprose  tomcat 关闭时  hprose报错误信息
 hprose-php 做服务端，hprose-java做客户端 结合 springmvc
idea里能正常启动tomcat,没有错误信息，并且可以访问到hprose-php服务端的数据。
但关闭tomcat时，提示如下：
严重 [main] org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web application [ROOT] created a ThreadLocal with key of type [hprose.io.ByteBufferStream$1] (value [hprose.io.ByteBufferStream$1@5f3a4b84]) and a value of type [hprose.io.ByteBufferStream.ByteBufferPool] (value [hprose.io.ByteBufferStream$ByteBufferPool@670b40af]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.

信息 [Thread-11] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load [java.util.concurrent.ScheduledExecutorService]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [java.util.concurrent.ScheduledExecutorService]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1383)
at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForClassLoading(WebappClassLoaderBase.java:1371)
at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1224)
at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1186)
at hprose.util.concurrent.Promise$1.run(Promise.java:40)
at hprose.util.concurrent.Threads$2.run(Threads.java:98)
at hprose.util.concurrent.Threads$1.run(Threads.java:73)

Exception in thread "Thread-11"
是什么原因呢？
可能是线程没执行完吧，被强制退出来吧。这种问题忽略就行，反正 tomcat 都关了。

 An illegal reflective access operation has occurred
 > WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by hprose.io.access.ConstructorAccessor (file:/home/jiangliuer/Documents/gradle_cache/caches/modules-2/files-2.1/org.hprose/hprose-java/2.0.38/f76814f7b7cb685786568faf9502e1e643112e27/hprose-java-2.0.38.jar) to method java.io.ObjectStreamClass.newInstance()
WARNING: Please consider reporting this to the maintainers of hprose.io.access.ConstructorAccessor
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
这只是一个警告，忽略就行了。

 Android客户端使用订阅，服务器端重启的情况，客户端无法自动重连服务器
 服务端使用的Nodejs
有时服务端重启后，需要杀掉APP才能重连服务器，有时又会自动连接
这个我也不是很清楚是什么原因。

 在安卓手机上，订阅有数量限制么？
 1、服务端使用hprose-nodejs 
2、安卓上使用hprose-java 
在使用中发现，当订阅数超过3个时，会造成invoke调用返回变得缓慢
现在改成只使用两个订阅，用字段进行区分
目前 2.0 的推送不够完善，虽然没有订阅数量限制，但是每个订阅会占用一个连接。新的 3.0 版本已经对推送做了改善，不管多少个订阅，都只需要一个连接，但跟 2.0 的推送实现不兼容。所以，虽然 nodejs 版本已经有 3.0 的实现，但是 Java 版本目前还没有，所以暂时用不了，需要 java 版本支持 3.0 之后才能用。

客户端 SetMaxPoolSize，默认是2，可以设置大一点。每个订阅占用一个连接，注意订阅的数量不能大于poolsize。但客户端多的情况，服务器连接过多，建议只订阅一个，用字段区分。

 How to unserialize golang map[string]interface{} to java side?
 Hi~
As the tile said,  ```which data struct``` should java to unserialize ```map[string]interface{}```?
Map<String, Object>

 JSON format support?
 Hi~
Great work!

When hprose-java's  filter can add support for JSON convert? any plans? 
Hprose for Java 现在仅使用 JDK 来实现，但是 JDK 并没有提供 JSON 支持，所以这个 hprose 2.0 版本不会增加对 JSON 的支持了。Hprose 3.0 会增加一个单独的 JSONRPC 的编码器。

@andot 
Thanks.

 服务器使用PHP语言开发的，然后我用Java语言请求，明明有响应数据，但是一直抛异常
 不知道为什么这里一直是REJECTED状态
switch (promise.getState()) {
    case FULFILLED: return result;
    case REJECTED: throw new ExecutionException(promise.getReason());
}

异常如下：
Exception in thread "main" java.util.concurrent.ExecutionException: hprose.common.HproseException: Wrong Response: 
Rm3{s6"status"i200;s3"ret"0s4"data"a{}}Aa1{m3{s4"name"s2"小兰"s5"ep_id"1s6"status"1}}z{"status":200,"ret":0,"data":[]}
	at hprose.util.concurrent.PromiseFuture.get(PromiseFuture.java:82)
	at hprose.client.HproseClient.invoke(HproseClient.java:740)
	at hprose.client.HproseClient.invoke(HproseClient.java:704)
	at test.Test.test2(Test.java:60)
	at test.Test.main(Test.java:47)
Caused by: hprose.common.HproseException: Wrong Response: 
Rm3{s6"status"i200;s3"ret"0s4"data"a{}}Aa1{m3{s4"name"s2"小兰"s5"ep_id"1s6"status"1}}z{"status":200,"ret":0,"data":[]}
	at hprose.client.HproseClient.decode(HproseClient.java:478)
	at hprose.client.HproseClient.access$300(HproseClient.java:65)
	at hprose.client.HproseClient$7.call(HproseClient.java:551)
	at hprose.client.HproseClient$7.call(HproseClient.java:547)
	at hprose.util.concurrent.Promise.call(Promise.java:739)
	at hprose.util.concurrent.Promise.resolve(Promise.java:753)
	at hprose.util.concurrent.Promise._resolve(Promise.java:775)
	at hprose.util.concurrent.Promise.resolve(Promise.java:789)
	at hprose.util.concurrent.Promise.call(Promise.java:739)
	at hprose.util.concurrent.Promise.resolve(Promise.java:753)
	at hprose.util.concurrent.Promise._resolve(Promise.java:775)
	at hprose.util.concurrent.Promise.resolve(Promise.java:789)
	at hprose.util.concurrent.Promise.call(Promise.java:739)
	at hprose.util.concurrent.Promise.resolve(Promise.java:753)
	at hprose.util.concurrent.Promise._resolve(Promise.java:775)
	at hprose.util.concurrent.Promise.resolve(Promise.java:789)
	at hprose.util.concurrent.Promise.call(Promise.java:739)
	at hprose.util.concurrent.Promise.resolve(Promise.java:753)
	at hprose.util.concurrent.Promise._resolve(Promise.java:775)
	at hprose.util.concurrent.Promise.resolve(Promise.java:789)
	at hprose.util.concurrent.Promise.call(Promise.java:739)
	at hprose.util.concurrent.Promise.resolve(Promise.java:753)
	at hprose.util.concurrent.Promise._resolve(Promise.java:775)
	at hprose.util.concurrent.Promise.resolve(Promise.java:789)
	at hprose.util.concurrent.Promise.resolve(Promise.java:756)
	at hprose.util.concurrent.Promise._resolve(Promise.java:775)
	at hprose.util.concurrent.Promise.resolve(Promise.java:789)
	at hprose.client.HproseHttpClient$2.run(HproseHttpClient.java:321)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

我就是一个菜鸟，就照着示例里面的代码写的
public static void test2() throws Throwable {
	HproseHttpClient client = (HproseHttpClient) HproseClient.create("http://esapi-stg.myhll.cn/index.php?_g=index&_m=ep&_a=service_entry");
    InvokeSettings settings = new InvokeSettings();
    settings.setByref(true);
    Map<String, Object> map = new HashMap<String, Object>();
    map.put("ep_id", 1);
    map.put("status", 1);
    map.put("name", "小兰");
    Object[] arguments = new Object[] {map};
    client.invoke("getInfo", arguments, settings);
    System.out.println(map);
    System.out.println(arguments[0]);
}

你的 PHP 服务器有问题。在 Hprose 输出后面还多了：
```
{"status":200,"ret":0,"data":[]}
```
这个内容，你看看你服务器这个多余的内容是哪儿来的。

 跨域问题
 
 hprose-java不支持maven依赖吗？没有maven支持版本？
 
<!-- https://mvnrepository.com/artifact/org.hprose/hprose-java -->
<dependency>
    <groupId>org.hprose</groupId>
    <artifactId>hprose-java</artifactId>
    <version>2.0.38</version>
</dependency>


https://search.maven.org/artifact/org.hprose/hprose-java/2.0.38/jar

 hprose-java/wiki
 
hprose-java不支持maven依赖吗？没有maven支持版本？

<!-- https://mvnrepository.com/artifact/org.hprose/hprose-java -->
<dependency>
    <groupId>org.hprose</groupId>
    <artifactId>hprose-java</artifactId>
    <version>2.0.38</version>
</dependency>


 查询单个对象的时候 可以  但是 查询 对象集合的时候 就不行了 List<A>
 _Originally posted by @andot in https://github.com/hprose/hprose-java/issues/43#issuecomment-389490414_
unserialize 方法有个 Type 类型的参数，对于 List<A> 这种泛型，你需要指定具体的泛型类型才可以按照你指定的类型反序列化，不带类型参数的话，是按照默认的类型映射来反序列化的。

如果你不是直接使用unserialize方法，那你应该是在反序列化的一段没有注册该类型。请参见：https://github.com/hprose/hprose-java/wiki/Hprose-%E5%BA%8F%E5%88%97%E5%8C%96#register-%E6%96%B9%E6%B3%95

我是使用 motan 框架 他们框架中使用 hprose 进行序列化 List<A>  难道不是自动进行 注册和检测 吗

是返回的结果 是单个对象的时候  就可以  但是返回的结果是List 集合的时候 就不行了 

明白了

 环境差异导致不能连接到服务器，如何排查
 由于目前使用的是局域网，功能一切正常，但搬到阿里云的经典网络中以后使用客户端就无法连接到服务端订阅消息了，客户端连接阿里云hprose服务后没有任何反应，服务器相应的订阅日志也没有激发
排查过如下
1. centos7防火墙已关闭
2. 无论是服务器本地还是远程telnet服务器的ip port都可以通 说明端口一打开
3. 阿里云安全组排查没有限制相应的端口，且采用的是禁用部分端口，放开其他端口的做法
4. 局域网服务器和阿里云服务器代码相同 无论是连域名或者ip地址服务端都没有看到订阅的日志输出
服务端代码如下 
![image](https://user-images.githubusercontent.com/7161770/42745369-f157f7ba-8904-11e8-8c90-8527b5c07b99.png)

![image](https://user-images.githubusercontent.com/7161770/42745386-0a6d30ee-8905-11e8-8a22-02969b6fb2c5.png)


客户端代码如下
![image](https://user-images.githubusercontent.com/7161770/42745412-2875517a-8905-11e8-9995-054ecac29a4c.png)
 与服务器的链接是建立了 但一直没有链接成功的日志输出
![image](https://user-images.githubusercontent.com/7161770/42749668-040f1ea8-8917-11e8-8707-3a582a452f70.png)


局域网可以通，阿里云内网不通，说明代码没有问题，问题出在阿里云上，解决方法：百度、google、bing 搜索“阿里云 内网连接”，“阿里云 内网互通”等关键字，即可搜到解决方法。

 hprose.io.unserialize.Reader.unserialize占用CPU奇高
 我是这样使用的：
```
HproseFormatter.unserialize(value,List.class);
```
是不是我使用方法不对？
![learning](https://user-images.githubusercontent.com/27395920/40229785-e3c3426e-5ac7-11e8-8a98-3740e0c87570.png)

`PropertyAccessor.unserialize` 是通过反射调用属性上 setter 方法来设置属性的。反射操作比其他操作占用更多的 CPU 时间是正常的，反射调用本来就比普通调用要慢几十到几百倍。

这部分虽然可以通过生成字节码的方式来优化，但是这需要依赖第三方的包，而且不支持 Android，所以目前这部分没有使用生成字节码的方式优化。

噢，谢谢。

 ByteBufferStream是否需要close?
 ByteBufferStream究竟需不需要close?
ByteBufferStream怎么获取byte[]？是toArray()?还是 byteBufferStream.buff.array()?
还有能否给API加点注释吗？
还有一个问题是：我用
```
List<StraightCoord> data = 
ByteBufferStream serialize = HproseFormatter.serialize(data);
byte[] value = serialize.toArray();
```
把value存到redis,
服务重启后在把redis的value值反序列化
```
List<StraightCoord> unserialize = (List<StraightCoord>) HproseFormatter.unserialize(value);

```
就提示:hprose.util.LinkedCaseInsensitiveMap cannot be cast to dto.StraightCoord
请问这是怎么回事？

因为你可以把 ByteBufferStream 里面的 Buffer 直接拿出来用，当你拿出来用之后，就不能 close 了，close 的话，会把 Buffer 放会池中被重用，到时候会跟你拿出来用的 Buffer 冲突。如果你只是 toArray() 了，并没有直接使用其中的 Buffer，那么你就可以放心的 close 了。其实就算不 close，也不过是不把 Buffer 所引用的 byte[] 放回到池中，它会随着 ByteBufferStream 对象被回收一同被回收。

反序列化时，你的 StraightCoord 类型没有注册，所以它找不到这个类，就会按照 Map 序列化了，而 Map 并不能转换为你定义的 StraightCoord 类型，所以会报错。你反序列化之前，先注册一下这个类型就可以了。

怎么注册？
```
HproseClassManager.register(StraightCoord.class, "StraightCoord");
```
这样吗？

嗯，对，序列化和反序列化前都写上。

 Android客户端使用订阅，服务器端重启的情况，客户端无法自动重连服务器。
  public final void onTimeout(Connection conn, TimeoutType type) {
        if (TimeoutType.CONNECT_TIMEOUT == type) {
            responses.remove(conn);
            Request request;
            while ((request = requests.poll()) != null) {
                request.result.reject(new TimeoutException("connect timeout"));
            }
        }
        else if (TimeoutType.IDLE_TIMEOUT != type) {
            Map<Integer, Response> res = responses.get(conn);
            if (res != null) {
                Iterator<Map.Entry<Integer, Response>> it = res.entrySet().iterator();
                while (it.hasNext()) {
                    Map.Entry<Integer, Response> entry = it.next();
                    it.remove();
                    Response response = entry.getValue();
                    response.timer.clear();
                    response.result.reject(new TimeoutException(type.toString()));
                }
            }
        }
    }
客户端在上面函数中进入死循环，出不来了。            while ((request = requests.poll()) != null) {
                request.result.reject(new TimeoutException("connect timeout"));
            }中
感谢大力支持

为啥我现在使用，还是会遇到服务器重启了，客户端无法自动重连服务器
服务端是用的nodejs 
客户端是安卓

 Android： 有需要解析的域名的URI的TCP client，会发生在主线程解析域名的异常
 由于`Connector`类的`create`方法实质上在caller当前线程同步调用了`InetSocketAddress`的构造方法，这一调用如果发生在主线程，会导致android的`NetworkOnMainThreadException`。
在创建客户端时，并不会创建连接，连接是在调用时才创建的，同步调用本来就不应该在主线程中使用，所以这应该不是个问题。

目前看到的状况是，在主线程调用TCP Client的subscribe就会造成同步调用Connector的create方法。

不太明白为什么这里没有被schedule到线程池。

`subscribe` 方法在调用时，如果没有指定客户端 `id` 参数，它会自动调用 `autoId` 方法来获取客户端 id，而如果客户端 id 没有初始化的情况下，它会首先同步调用 invoke 方法来获取客户端 id，使用同步调用而不是异步调用，是为了防止多个订阅重复获取 id，保证先获取到 id，再进行订阅。

所以，如果你没有指定客户端 id，就进行订阅的话，在 android 中需要单独开一个线程来进行该操作。

 Suggestion : Improvement of String.equals("")
 Hi,
&nbsp;&nbsp;&nbsp;&nbsp;I have found some usage of “String.equals("")” in your project.  However, java.lang.String provides a packaged method  “String.isEmpty()”. The latter is even more efficient than the former.

PS:
https://github.com/hprose/hprose-java/blob/master/src/main/java/hprose/server/HproseServlet.java | 184 
https://github.com/hprose/hprose-java/blob/master/src/main/java/hprose/client/CookieManager.java | 52 /95/153


 Suggestion : continuous calls of StringBuilder.append 
 Hi,
&nbsp;&nbsp;&nbsp;&nbsp;I have found some continuous calls about `StringBuilder.append(..)` in some files. For example, there are several continuous calls from line 61 to 76 in the file https://github.com/hprose/hprose-java/blob/master/example/MyApplication/app/src/main/java/org/hprose/myapplication/MainActivity.java

```Java
public void run() {
                            TextView text = (TextView)findViewById(R.id.textView);
                            StringBuilder sb = new StringBuilder();
                            for (int i = 0; i < users.length; i++) {
                                sb.append("name: ");
                                sb.append(users[i].name);
                                sb.append("\r\n");
                                sb.append("sex: ");
                                sb.append(users[i].sex);
                                sb.append("\r\n");
                                sb.append("birthday: ");
                                sb.append(users[i].birthday);
                                sb.append("\r\n");
                                sb.append("age: ");
                                sb.append(users[i].age);
                                sb.append("\r\n");
                                sb.append("married: ");
                                sb.append(users[i].married);
                                sb.append("\r\n");
                                sb.append("\r\n");
                            }
                            text.setText(sb.toString());
}
```
&nbsp;&nbsp;&nbsp;&nbsp;If it was achieved like `StringBuilder.append(..).append(..)append(..)`, it will promote its performance.
 你好，在使用Builder模式的setter的时候，失效
 https://github.com/hprose/hprose-java/blob/3aed1f678a03aededdf99dad7ad18a1e1cec6c5b/src/main/java/hprose/io/access/Accessors.java#L102

你好，如果使用如下的getter和setter，在序列化的时候将会失效
```
  public A getA() {
        return a;
    }

    public B setA(A a) {
        this.a = a;
        return this;
    }
```
因为返回setter 不是void的，这个可以添加逻辑为如果返回的是当前class也是可以通过验证的吗？
 你好，在使用Builder模式的setter的时候，失效
 https://github.com/hprose/hprose-java/blob/3aed1f678a03aededdf99dad7ad18a1e1cec6c5b/src/main/java/hprose/io/access/Accessors.java#L102

你好，如果使用如下的getter和setter，在序列化的时候将会失效
```
  public A getA() {
        return a;
    }

    public B setA(A a) {
        this.a = a;
        return this;
    }
```
因为返回setter 不是void的，这个可以添加逻辑为如果返回的是当前class也是可以通过验证的吗？
 SkyWalking HProse plugin for auto instrument
 Since SkyWalking became an Apache project, we are going to build a more wildly support ecosystem.  So I want to know:
- Does the HProse team want to provide the plugins for hprose-java released version? If yes, which versions do you prefer to support?
> Does the HProse team want to provide the plugins for hprose-java released version?

Yes.

> which versions do you prefer to support?

2.0.30+

Sure. Hope to see your pull request soon. Cheer. Now, we have documents about plugins and plugin test cases. Glad you can join us.

What should I do? Does this project https://github.com/opentracing-contrib/java-hprose support SkyWalking?

I hope can provide auto instrument in SkyWalking, also means native supported, not just by OT supported.. You can find many rpc frameworks already supported. You can find plugin development guide in our document.

The OT API changes from time to time. I don't think it is the best way to do so.

Can you give me an example?

https://github.com/apache/incubator-skywalking/tree/master/apm-sniffer/apm-sdk-plugin

You can find all of our plugins source files. I suggest you take motan or dubbo as an example.

And you can find our test cases here, https://github.com/SkywalkingTest/skywalking-agent-testcases 

Test cases guide, https://github.com/SkywalkingTest/skywalking-agent-testcases/blob/master/docs/how-to-write-a-plugin-testcase-cn.md


Plugin development guide, https://github.com/apache/incubator-skywalking/blob/master/docs/cn/Plugin-Development-Guide-CN.md


看了好久，发现完全看不懂。

哪些地方看不懂？原理其实和Spring AOP类似，只是更强而已。

可以针对构造函数和方法，增加切面。然后利用我们ContextManager的APIs，要创建span或者传输carrier。这部分和OpenTracing很类似的。

OpenTracing 这个比较好懂，可以直接作为 hprose 的一个中间件来实现。但是 SkyWalking 的插件，没看懂该在哪儿增加切面。

hprose的任何方法都可以，他有点像spring切面。可以加载到任何包里面的类上面。

是指在发布的服务类上面增加切面吗？如果是在发布的服务类上面的话，好像就不用专门为hprose来写了，那应该就是通用的了啊。

 我做了一个RPC的性能测试，hprose表现不是非常好
 我做了一个rpc benchmark：https://github.com/hank-whu/rpc-benchmark
会长期维护不定期发布结果的，欢迎指出代码或者配置错误，我会及时跟进并重新进行benchmark

本次测试结果：https://www.jianshu.com/p/18c95649b1a4
我提交了一个测试代码的修改，hprose 客户端是线程安全的，内置连接池，在并发时只需要1个客户端，如果测试时，每个线程都新开一个客户端，连接池就毫无用处了。另外，默认是半双工模式，一个连接同时只能跑一个请求，而且连接池有个最大连接数限制，因此，在这个模式下效率也不高，改为全双工模式的话，一个连接可以同时跑多个请求，这样速度会增加很多。

已经合并，多谢支持

 null pointer exception
 Hi,

Thank you.

 Fixed HproseTcpClient may miss sending the first request
 Fix #32
 HproseTcpClient may miss the first request after connected
 The step to reproduce:
1. The server is in loopback mode or the server is in the same machine with the client.
2. call IProtocol protocol = Client.useService("0.0.0.0:port").
3. call protocol.func() only once to synchronize call to the server.
Sometimes this call will fail.

Reason:
The client will wait HproseClient.timeout before it fails, and the default time is 5000ms or 5s.

Since it is the first call, size = 0, it will call ConnectorHolder.create() to connect to server.
When the server lives in the same machine with the client, maybe onConnected() is called before requests.offer(request);
And the connection becomes idle!
If we do rpc call again, it has the chance to communicate, but if we only communicate once, it may fail forever.

```java
protected final void create(Request request) {
        if (size.get() < client.getMaxPoolSize()) {
            try {
                ConnectorHolder.create(client.uri, this, client.isKeepAlive(), client.isNoDelay());
            }
            catch (IOException ex) {
                request.result.reject(ex);
//                while ((request = requests.poll()) != null) {
//                    request.result.reject(ex);
//                }
                return;
            }
        }
        requests.offer(request);
    }
```

```java
public final void onConnected(Connection conn) {
        Request request = requests.poll();
        if (request != null) {
            send(conn, request);
        }
        else { //come here
            synchronized (idleConnections) {
                if (!idleConnections.contains(conn)) {
                    idleConnections.offer(conn);
                }
            }
            recycle(conn);
        }
    }
```

The problem is idleConnections lock range is too small for onConnected().
And I suggest this:

```java
public final void onConnected(Connection conn) {
    synchronized (idleConnections) {
        Request request = requests.poll();
        if (request != null) {
            send(conn, request);
        }
        else {
                if (!idleConnections.contains(conn)) {
                    idleConnections.offer(conn);
                }
            recycle(conn);
        }
    }
}
```

Since create() is only called by fetch(), and fetch() has a big lock for idleConnections. And we can share this lock to avoid the problem.
Yes, you are right. Thank you! You can create a pull request, I will merge it.

 hprose RPC protocol speed
 Hi there

I made some test in order to benchmark hprose RPC protocol and i was very surprised to see that it is slower then making an http request.

The test i made is really simple i just wrote a hello world http method that answer "hello" to an http get and wrote a client that call it 100 times.

Then i wrote a hrpose server listening on TCP having a helloworld method and call it from an hprose client 100 times.

I monitoring the execution time of both protocol and HTTP protocol win all the time expect when the number of call is above 1000.

I was exepecting that a self made protocole was quicker then HTTP.

Did i made something wrong here ?
I don't know what's wrong, but on my computer, http get on tomcat: 2000-3000qps, and tcp hprose server: 80000-100000qps.


can you please try to put your remote method on another host then localhost ? In my test the client was on localhost but both serveur (http, hprose) was on a remote host. So the traffic had to go threw TCP like a prod context.

If you use TCP, you can use `setFullDuplex` method to set the `fullDuplex` property to `true` on the client. It will be faster than the default setting.

The change is not hudge. Here is the results i get

> 10 requests :
> duration hpro : 175899988
> duration http : 82985343
> HTTP WIN

> 100 requests : 
> duration hpro : 783401527
> duration http : 716310436
> HTTP WIN

> 500 requests :
> duration hpro : 3416468571
> duration http : 3536256223
> HPROSE WIN

> 1000 requests :
> duration hpro : 6644799171
> duration http : 6926884271
> HPROSE WIN

As i wrote before for a little number of request HTTP seems to be faster (real world situation) but when we loop over hundred of request then Hprose seems to be faster. I guess it is because HTTP Open & Close ressources for each call while Hprose let the connection Opened. But still in my little test HTTP seems to be faster.


My test is 1 client, 40 threads, 25000 requests on each thread.

@andot I think @danielsawan 's tests bring some important info. Limited requests per thread/connection seem more important to me. I suggest you should dive in to find out what is really happening in those cases.

 Wiki english translation ?
 Would be cool for non chinese speaking pplz ;)

https://github.com/hprose/hprose-java/wiki
I think so, but my English was poor. I hope someone can help me to do that.

 Security
 Hi !

I was wondering if there is a built in security while calling a method in hprose. I mean actually i guess the server just bind a port and accept every incoming communication including illegit ones.
You can define an `InvokeHandler` to prevent illegal clients.

```java
public interface InvokeHandler {
    Promise<Object> handle(String name, Object[] args, HproseContext context, NextInvokeHandler next);
}
```

You can cast `context` to `HttpContext` on servlet server or `TcpContext` on TCP server. And then, you can get the client IP or something you need.


Thanks, I manage to get the request IP from TcpContext 👍 

