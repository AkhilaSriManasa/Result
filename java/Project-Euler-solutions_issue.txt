 Simpler solution to the problem using files.
 
 Update p025.py
 Runs faster, always prefer faster code I guess
Rejected for these reasons:

- Uses floating-point algorithms without proof or justification.
- Uses docstring inappropriately.
- Fails to follow my code formatting style.
- Makes no practical improvement on speed, because I benchmarked my solution to run in under 0.1 second. https://www.nayuki.io/page/project-euler-solutions#benchmark-timings
- Violates some of my goals in Project Euler, such as:

> I strongly avoid any floating-point arithmetic at all, unless there is no other reasonable way (that I know of) to solve the problem

( https://www.nayuki.io/page/project-euler-solutions )

 Swift directory
 Swift directory added
Unsolicited contribution not accepted.

> Unsolicited contribution not accepted.

whats wrong with that?

I did not write anywhere that about asking for code contributions to my Project Euler solutions repository.

I am not clear on your motivations - why do you want to put your code in my project? Are you trying to fill a perceived gap in functionality? Are you looking to take credit for your work by incorporating it into a popular repo?

 Modified Problem 6
 
This pull request is 100% identical to your https://github.com/nayuki/Project-Euler-solutions/pull/38 . Please do not open duplicate requests!

 Modified Problem 10
 
This pull request is 100% identical to your https://github.com/nayuki/Project-Euler-solutions/pull/39 . Please do not open duplicate requests!

 Modified problem 4
 
This pull request is a subset of your https://github.com/nayuki/Project-Euler-solutions/pull/38 . Please do not open duplicate requests!

 Modified problem 2
 
The code changes you made in this pull request are incorrect and inappropriate. Here are some (not all) of the reasons why your changes will be rejected:
* In P2, you changed `x <= 4000000` to `x < 4000000`. The [problem statement](https://projecteuler.net/problem=2) says "whose values do not exceed four million". Therefore, four million is an acceptable value.
* In P2, you changed the starting value of x and y without justifying your work. My code already runs and computes the correct answer, so the onus is on you to prove that your way is better.
* In P4, P6, and P10 you deleted all my code and rewrote the solution without justification. Your solution is not clearly better, and I can point to parts where it is clearly worse (e.g. the use of the floating-point function `Math.pow()`).

Overall, I am not sure what you are trying to achieve in your changes. If you are experimenting in private, that's okay.

Do not contribute this low-quality, unacceptable work upstream to the original author.

Hey Nayuki,

Sorry for my pull requests. I was trying to experiment with your solutions in private and I must have created these pull requests. I am trying to do Project Euler in Java, so I thought I would try and modify your solutions with PRs. Once again, sorry for disturbing you with these inappropriate PRs and thanks again for providing a model to base my own PE solutions on. 

-Sid

 Test rec
 
You are spamming me for revenge.

 add some test
 add some test for this project
You are spamming me for revenge.

  I have a few suggestions and edited your source code
 I saw an error in your pow () function and left a comment in it.
I have added @test to your pow () function
You are spamming me for revenge.

 This is my homework. Sorry for bothering you
 I saw an error in your pow () function and left a comment in it.
I have added @Test to your pow () function

 Test ReciprocalMod Function
 tests for reciprocalMod function in Library class
tests for reciprocalMod function in Library class

You are spamming me for revenge.

 Add test for pow function
 
You are spamming me for revenge.

 Test powMod Function in Library.java
 
You are spamming me for revenge.

 Add isPrime Test
 
You are spamming me for revenge.

 Pow Test Function
 Test Pow Function With 7 TestCases
You are spamming me for revenge.

 add test findRootSecant
 
add testFindRootSecant

You are spamming me for revenge.

 comitt
 
/// unit test for Library.java

đụng hàng ông ơi.ông học lớp kiểm thử ak


ukm.web dùng chán vc.


You added extra files to my project without explaining or justifying them. Namely: .classpath, .gitignore, .project (all from the Eclipse IDE).

You also added LibraryTest2.java, which is unjustified given that the content belongs in LibraryTest.java. The logic in your class is incorrect, and the test cases should not be using `assertNotSame()` with a string as one of its arguments.

If this is your pet project, keep the changes private to your own repository. Do not contribute this kind of low-quality work upstream.

 Update LibraryTest.java
 Add Uinttest flow control for reciprocalMod(). I fixed it.Please check it again
Repeating my comments from your other pull requests: Fix your code indentation, then I will review whether your proposed logic is acceptable for inclusion.

 Update LibraryTest.java
 Add Unittest flow of control for function reciprocalMod()
Your indentation and your whitespace do not match my style conventions.

These are the same problems as your [other pull request](https://github.com/nayuki/Project-Euler-solutions/pull/24).

sory.i thing Error occurred during copy and paste

You are mixing tabs and spaces for indentation. Follow my code precisely, and only use tabs. Indent to the correct level on each line.

 Update LibraryTest.java
 add Testpow()
Please improve your style, or else I cannot accept your changes.

Name the function correctly, indent properly using exclusively tabs, and add a space after each comma.

Look at my existing code as examples, and make yours blend in!

thank your idear.i will try harder

Can you accept my changes,please?


You said you will try harder, but you didn't commit any new changes.

I see no improvement in your code, despite my repeated attempts to impart you with advice. Firmly rejected.

 [Question] Isn't it too slow to get answer?
 https://github.com/nayuki/Project-Euler-solutions/blob/master/haskell/p010.hs

I did like your code. But it's too slow to get the answer.


Please provide more evidence of your work. What compiler and version did you use? What is your CPU? What execution time did you measure?

On my side of things, I measured 7 seconds on GHC 7.10.3, Intel Core i5-4690 (Haswell) 3.50 GHz.
https://www.nayuki.io/page/project-euler-solutions#benchmark-timings

Here is my info.
![image](https://user-images.githubusercontent.com/10189871/64092562-4057ee80-cd90-11e9-91a0-8bac53825100.png)

And Here is my code.
https://github.com/ryanpark91/project-euler-haskell/blob/master/src/Problem_10.hs

 Adding in some JavaScript solutions
 Hi! I hope this repo is still active.

I've been working on some JavaScript solutions to project-euler questions. I'd like to start adding them to your repo.

Here's the first 5.

Thanks
Jonathan.
Sorry, nope:
* There isn't a good runtime environment for JavaScript. In a web browser, you can't run long computations or else you freeze the GUI, and the browser eventually pops up a dialog box asking you to continue or terminate the computation. On the command line, there are Node.js and other choices, making for a fragmented ecosystem.
* I'm not a fan of your couple of lines of commented-out `console.log()` calls. These are for private experimentation and debugging, not fit for public display. There's a reason you see (very nearly) zero commented-out code or prints among _all_ of my published codebases and full history.
* `var main = function()` seems like a roundabout way to say `function main()`.
* Your code is in the old style of ES5. I've already fully embraced ES6 and beyond (e.g. async+await in ES2017) in my own JavaScript work. Also embraced TypeScript which enhances JavaScript syntax with type annotations and a type-checking compiler - so if I ever want to do PE in JS, I would choose TS. After all, it can compile down to plain typeless JS.
* Some solutions later on will require bigint. Bigint is still in _draft_ stages of the ECMAScript specification, although already implemented by Chrome and Firefox. Otherwise, grabbing a third-party library for bigint is not fun.
* This repository is a collection of **my** PE solutions. This means I understand all the code and I stand behind every single line backed by my own personal guarantee. Hence I generally cannot accept unsolicited contributions. (Even though in this case I could write JavaScript myself and audit your code fully.)
* Adding a JS port _will_ undeniably increase my maintenance burden. But I honestly don't think JS would add much intellectual value with respect to my existing collection 4 languages. The JS version will be fashioned after Java, but will have no types like Python. JS won't even have list comprehensions like Python, so the loops will probably be counted manually. The Mathematica version is halfway to functional programming, and it includes a lot of relevant library functions (e.g. PrimeQ). The Haskell version is pure functional programming which contrasts with the imperative Java and Python logic.
* But don't let me stop you from continuing to make progress on [your own PE repo](https://github.com/JonathanBrownlee/Project-Euler). Build up your own brand and don't worry about other people. After all, you can never reject your own contribution to your repository!

Okay that's no problem. 

If you do one day change you mind, I'd be happy to provide documentation on how to setup an environment for running the JavaScript programs. 

Regardless, I appreciate you getting back to me. 

Jonathan

 Crazy Magic, #26
 Hi, I'm trying to understand what kind of crazy magic you're using for the twenty-sixth problem, specifically this little black box of black magic:

```
def reciprocal_cycle_len(n):
    seen = {}
    x = 1

    for i in itertools.count():
        if x in seen:
            return i - seen[x]
        else:
            seen[x] = i
            x = x * 10 % n
```

It's the simplest thing I've ever seen that I just can't figure out. I guess I'm just not good with numerology. Is there a spatial relationship that would make sense?
It is a finite state machine that simulates dividing 1.000000... by n. In each iteration, x is the current remainder in the division, which is an integer between 1 and n-1 (inclusive).

This thread is about your understanding of math and logic, not an issue with my program. Please direct any further questions you have to a public volunteer forum such as https://stackoverflow.com/questions/ask or https://math.stackexchange.com/questions/ask .

> It is a finite state machine that simulates dividing 1.000000... by n. In each iteration, x is the current remainder in the division, which is an integer between 1 and n-1 (inclusive).

Thanks, bro.

 README.markdown dosyasının çevirisini üzerine bir çalışma.
 Bu pull request işleminde BENI_OKU.txt dosyası README.markdown dosyasını türkçe çevirisidir.
No foreign languages, please.
You didn't even tell me what language you are contributing.
Google tells me it's Turkish.

 suggestion
 Incidentally, the solution to Problem 6 can be further simplified as the product of linear terms and a constant:

n(n-1)(n+1)(3n+2)/12
#p008.py
def digit_product(s):
    return reduce(lambda x, y: x*y, map(int, [i for i in s]))

@gregbo But how many lines of algebra formulas do you need to write to justify that simplification?

I make a balance between computation time and human understanding. I believe my solution is the most appropriate for the small problem size.

 Improve performance for P30
 This suggestion improves time on my machine from taking 4.601s to taking 1.633s.
Thanks for your suggestion; you did open me up to more mathematical reasoning on this problem. I'm lukewarm to the idea and am leaning towards no.

* Your code and your added explanation are correct - this is better than almost all the other (rather bad) pull requests I received in this repository.
* My goal is to run in under 10 seconds. [For Java, it runs in 0.05 s](https://www.nayuki.io/page/project-euler-solutions#benchmark-timings), and for Python it runs in 3 s. I find it meaningless to optimize too much beyond that, balancing against other factors like understandability and compactness.
* Although your code change is small (and introduces a magic constant), you added 2 lines of explanation to justify how to optimize the 6-digit case (whereas my explanation covers all n >= 7). Primarily, I don't think this explanation is worth going from 3 seconds of run time to 1 second.

That makes sense. I'll go ahead and close the pull request.

 where is the code bro
 
 How are you calculating floor of a number
 I saw you calculating sqrt of some number but I didn't get how you are calculating floor of that number in this code

```
def sqrt(x):
	assert x >= 0
	i = 1
	while i * i <= x:
		i *= 2
	y = 0
	while i > 0:
		if (y + i)**2 <= x:
			y += i
		i //= 2
	return y
```
This is an integer square root algorithm. For a given integer `x`, this function finds the largest integer `y` such that `y * y <
Try adding some print statements to see the intermediate values of `i` and `y`, and try calling the function different values of `x`.

If you have further questions, please make a post on Stack Overflow and the fine volunteers will answer you: https://stackoverflow.com/questions/ask

 added a powershell dir for other contributors
 added a powershell dir for other contributors
I am not interested in shell scripting languages. This will not be incorporated into the main repo, but feel free to fork the project.

ok thank you for letting me know
*Besmir ZANAJ*



On Tue, Jun 26, 2018 at 11:33 AM Nayuki <notifications@github.com> wrote:

> I am not interested in shell scripting languages. This will not be
> incorporated into the main repo, but feel free to fork the project.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/nayuki/Project-Euler-solutions/pull/15#issuecomment-400354000>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ADAbFgP76EpkBQEwQj3RzHHWbBjW3BwAks5uAlQ_gaJpZM4U1a_H>
> .
>


